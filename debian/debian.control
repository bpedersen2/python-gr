Source: python-gr
Maintainer: Josef Heinen <j.heinen@fz-juelich.de>
Section: python
Priority: optional
X-Python-Version: >= 2.6
X-Python3-Version: >= 3.4
Build-Depends:
 python-all-dev (>= 2.6.6-3), python3-all-dev (>= 3.4.0),
 python-setuptools (>= 0.6b3), python3-setuptools (>= 0.6b3),
 python-numpy, python3-numpy,
 debhelper (>= 7), dh-python,
 git,
 gr (>= 0.27.0)
Standards-Version: 3.9.1

Package: python-gr
Architecture: any
Depends:
 ${misc:Depends},
 ${python:Depends},
 ${shlibs:Depends},
 python-numpy,
 gr (>= 0.27.0)
Description: Python visualization framework
 GR - a universal framework for visualization applications
 =========================================================
 .
 *GR* is a universal framework for cross-platform visualization
 applications. It offers developers a compact, portable and consistent
 graphics library for their programs. Applications range from publication
 quality 2D graphs to the representation of complex 3D scenes.
 .
 *GR* is essentially based on an implementation of a Graphical Kernel
 System (GKS) and OpenGL. As a self-contained system it can quickly and
 easily be integrated into existing applications (i.e. using the
 ``ctypes`` mechanism in Python or ``ccall`` in Julia).
 .
 The *GR* framework can be used in imperative programming systems or
 integrated into modern object-oriented systems, in particular those
 based on GUI toolkits. *GR* is characterized by its high
 interoperability and can be used with modern web technologies. The *GR*
 framework is especially suitable for real-time or signal processing
 environments.
 .

Package: python3-gr
Architecture: any
Depends:
 ${misc:Depends},
 ${python3:Depends},
 ${shlibs:Depends},
 python3-numpy,
 gr (>= 0.27.0)
Description: Python 3 visualization framework
 GR - a universal framework for visualization applications
 =========================================================
 .
 *GR* is a universal framework for cross-platform visualization
 applications. It offers developers a compact, portable and consistent
 graphics library for their programs. Applications range from publication
 quality 2D graphs to the representation of complex 3D scenes.
 .
 *GR* is essentially based on an implementation of a Graphical Kernel
 System (GKS) and OpenGL. As a self-contained system it can quickly and
 easily be integrated into existing applications (i.e. using the
 ``ctypes`` mechanism in Python or ``ccall`` in Julia).
 .
 The *GR* framework can be used in imperative programming systems or
 integrated into modern object-oriented systems, in particular those
 based on GUI toolkits. *GR* is characterized by its high
 interoperability and can be used with modern web technologies. The *GR*
 framework is especially suitable for real-time or signal processing
 environments.
 .
