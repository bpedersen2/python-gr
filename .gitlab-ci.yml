stages:
- build
- install
- deploy

build:
  stage: build
  image: ubuntu:16.04
  script:
  - apt-get update
  - apt-get install -y virtualenv python-pip git
  - virtualenv env
  - env/bin/pip install --upgrade pip
  - env/bin/python setup.py sdist
  artifacts:
    paths:
    - dist/
    - tests/
    - tox.ini

install-tox:
  stage: install
  image: iffregistry.fz-juelich.de/docker-images/python-testing/debian:latest
  variables:
    GIT_STRATEGY: none
  script:
  - apt-get update
  - apt-get install -y git libxt6 libxrender1 libgl1-mesa-glx
  - tox

check-codestyle:
  stage: build
  image: ubuntu:18.04
  script:
  - apt-get update
  - apt-get install -y virtualenv python-pip git
  - virtualenv env
  - env/bin/pip install --upgrade pip
  - env/bin/pip install flake8-docstrings
  # Check against PEP8 and PEP257
  # Ignore line length check (E501)
  # Ignore single-line docstring check (D200)
  - env/bin/python -m flake8 --ignore E501,D200 gr/pygr/mlab.py

install-ubuntu1604-python2:
  stage: install
  image: ubuntu:16.04
  variables:
    GIT_STRATEGY: none
  script:
  - rm -rf install && mkdir install && cd install
  - apt-get update
  - apt-get install -y virtualenv python-pip
  - virtualenv env
  - env/bin/pip install --upgrade pip
  - env/bin/pip install ../dist/gr-*.tar.gz
  - GKS_WSTYPE=png env/bin/python -c 'import gr; gr.polyline([0, 1], [0, 1]); gr.updatews()'
  - env/bin/python -c 'import gr3'
  artifacts:
    paths:
    - install/gks.png

install-ubuntu1604-python3:
  stage: install
  image: ubuntu:16.04
  variables:
    GIT_STRATEGY: none
  script:
  - rm -rf install && mkdir install && cd install
  - apt-get update
  - apt-get install -y python3-venv python3-pip
  - python3 -m venv env
  - env/bin/pip install --upgrade pip
  - env/bin/pip install ../dist/gr-*.tar.gz
  - GKS_WSTYPE=png env/bin/python -c 'import gr; gr.polyline([0, 1], [0, 1]); gr.updatews()'
  - env/bin/python -c 'import gr3'
  artifacts:
    paths:
    - install/gks.png

install-ubuntu1804-python2:
  stage: install
  image: ubuntu:18.04
  variables:
    GIT_STRATEGY: none
  script:
  - rm -rf install && mkdir install && cd install
  - apt-get update
  - apt-get install -y virtualenv python-pip
  - virtualenv env
  - env/bin/pip install --upgrade pip
  - env/bin/pip install ../dist/gr-*.tar.gz
  - GKS_WSTYPE=png env/bin/python -c 'import gr; gr.polyline([0, 1], [0, 1]); gr.updatews()'
  - env/bin/python -c 'import gr3'
  artifacts:
    paths:
    - install/gks.png

install-ubuntu1804-python3:
  stage: install
  image: ubuntu:18.04
  variables:
    GIT_STRATEGY: none
  script:
  - rm -rf install && mkdir install && cd install
  - apt-get update
  - apt-get install -y python3-venv python3-pip
  - python3 -m venv env
  - env/bin/pip install --upgrade pip
  - env/bin/pip install ../dist/gr-*.tar.gz
  - GKS_WSTYPE=png env/bin/python -c 'import gr; gr.polyline([0, 1], [0, 1]); gr.updatews()'
  - env/bin/python -c 'import gr3'
  artifacts:
    paths:
    - install/gks.png

install-debian9-python2:
  stage: install
  image: debian:9
  variables:
    GIT_STRATEGY: none
  script:
  - rm -rf install && mkdir install && cd install
  - apt-get update
  - apt-get install -y virtualenv python-pip
  - virtualenv env
  - env/bin/pip install --upgrade pip
  - env/bin/pip install ../dist/gr-*.tar.gz
  - GKS_WSTYPE=png env/bin/python -c 'import gr; gr.polyline([0, 1], [0, 1]); gr.updatews()'
  - env/bin/python -c 'import gr3'
  artifacts:
    paths:
    - install/gks.png

install-debian9-python3:
  stage: install
  image: debian:9
  variables:
    GIT_STRATEGY: none
  script:
  - rm -rf install && mkdir install && cd install
  - apt-get update
  - apt-get install -y python3-venv python3-pip
  - python3 -m venv env
  - env/bin/pip install --upgrade pip
  - env/bin/pip install ../dist/gr-*.tar.gz
  - GKS_WSTYPE=png env/bin/python -c 'import gr; gr.polyline([0, 1], [0, 1]); gr.updatews()'
  - env/bin/python -c 'import gr3'
  artifacts:
    paths:
    - install/gks.png

install-debian9-armhf-python3:
  stage: install
  image: debian:9
  tags:
    - armhf
  variables:
    GIT_STRATEGY: none
  script:
  - rm -rf install && mkdir install && cd install
  - apt-get update
  - apt-get install -y python3-venv python3-pip
  - python3 -m venv env
  - env/bin/pip install --upgrade pip
  - env/bin/pip install ../dist/gr-*.tar.gz
  - GKS_WSTYPE=png env/bin/python -c 'import gr; gr.polyline([0, 1], [0, 1]); gr.updatews()'
  - env/bin/python -c 'import gr3'
  artifacts:
    paths:
    - install/gks.png

install-centos7-python2:
  stage: install
  image: centos:7
  variables:
    GIT_STRATEGY: none
  script:
  - rm -rf install && mkdir install && cd install
  - yum install -y python
  - curl -LO https://bootstrap.pypa.io/get-pip.py
  - python get-pip.py
  - pip install --upgrade pip
  - pip install ../dist/gr-*.tar.gz
  - GKS_WSTYPE=png python -c 'import gr; gr.polyline([0, 1], [0, 1]); gr.updatews()'
  - python -c 'import gr3'
  artifacts:
    paths:
    - install/gks.png

install-fedora30-python2:
  stage: install
  image: fedora:30
  variables:
    GIT_STRATEGY: none
  script:
  - rm -rf install && mkdir install && cd install
  - dnf install -y python-pip
  - pip install --upgrade pip
  - pip install ../dist/gr-*.tar.gz
  - GKS_WSTYPE=png python -c 'import gr; gr.polyline([0, 1], [0, 1]); gr.updatews()'
  - python -c 'import gr3'
  artifacts:
    paths:
    - install/gks.png

install-fedora30-python3:
  stage: install
  image: fedora:30
  variables:
    GIT_STRATEGY: none
  script:
  - rm -rf install && mkdir install && cd install
  - dnf install -y python3-pip
  - python3 -m pip install --upgrade pip
  - python3 -m pip install ../dist/gr-*.tar.gz
  - GKS_WSTYPE=png python3 -c 'import gr; gr.polyline([0, 1], [0, 1]); gr.updatews()'
  - python3 -c 'import gr3'
  artifacts:
    paths:
    - install/gks.png

install-opensuse15-python3:
  stage: install
  image: opensuse/leap:15
  variables:
    GIT_STRATEGY: none
  script:
  - rm -rf install && mkdir install && cd install
  - zypper install -y python3-pip
  - python3 -m pip install --upgrade pip
  - python3 -m pip install ../dist/gr-*.tar.gz
  - GKS_WSTYPE=png python3 -c 'import gr; gr.polyline([0, 1], [0, 1]); gr.updatews()'
  - python3 -c 'import gr3'
  artifacts:
    paths:
    - install/gks.png

install-arch-python3:
  stage: install
  image: archlinux/base
  variables:
    GIT_STRATEGY: none
  script:
  - rm -rf install && mkdir install && cd install
  - pacman -Syu --noconfirm python-pip
  - python3 -m pip install --upgrade pip
  - python3 -m pip install ../dist/gr-*.tar.gz
  - GKS_WSTYPE=png python3 -c 'import gr; gr.polyline([0, 1], [0, 1]); gr.updatews()'
  - python3 -c 'import gr3'
  artifacts:
    paths:
    - install/gks.png

deploy-to-github:
  stage: deploy
  image: ubuntu:16.04
  variables:
    GIT_STRATEGY: none
  only:
    - branches@Scientific-IT-Systems/python-gr
    - tags@Scientific-IT-Systems/python-gr
  script:
  - apt-get update
  - apt-get install -y git python3-pip
  - python3 -m pip install git+https://gitlab-ci-token:${CI_JOB_TOKEN}@iffgit.fz-juelich.de/Scientific-IT-Systems/github-binary-upload.git
  - mkdir --mode=700 ~/.ssh/
  - (umask 0377 && echo "$SCIAPP_PYTHON_GR_PRIVATE_KEY" > ~/.ssh/id_rsa
                && echo "github.com $GITHUB_HOST_KEY" >> ~/.ssh/known_hosts)
  - git clone --mirror "$CI_REPOSITORY_URL" gr_mirror
  - cd gr_mirror && git push --mirror git@github.com:sciapp/python-gr.git && cd -
  - if echo "$CI_COMMIT_TAG" | grep -Eq '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
      echo "$SCIAPP_PYTHON_GR_ACCESS_TOKEN" | github-binary-upload --user jheinen sciapp/python-gr "$CI_COMMIT_TAG" dist/gr-*.tar.gz;
    fi

deploy-to-pypi:
  stage: deploy
  image: ubuntu:16.04
  variables:
    GIT_STRATEGY: none
  only:
    - tags@Scientific-IT-Systems/python-gr
  script:
  - rm -rf deploy && mkdir deploy && cd deploy
  - apt-get update
  - apt-get install -y virtualenv python-pip git
  - virtualenv env
  - env/bin/pip install --upgrade pip
  - env/bin/pip install twine
  - echo "[distutils]"                                 > ~/.pypirc
  - echo "index-servers ="                            >> ~/.pypirc
  - echo "    pypi"                                   >> ~/.pypirc
  - echo "[pypi]"                                     >> ~/.pypirc
  - echo "username=$PYPIUSERNAME"                     >> ~/.pypirc
  - echo "password=$PYPIPASSWORD"                     >> ~/.pypirc
  - env/bin/twine upload --repository pypi ../dist/gr-*.tar.gz

deploy-to-obs:
  stage: deploy
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  variables:
    GIT_STRATEGY: none
  only:
    - tags@Scientific-IT-Systems/python-gr
  script:
  - mkdir -p "${HOME}/.config/osc" && ln -s "${OSCRC}" "${HOME}/.config/osc/oscrc"
  - osc co science:gr-framework/python-gr
  - export VERSION=`echo "$CI_COMMIT_TAG" | sed 's/^v//'` ;
    sed 's/\(.*revision">\).*\(<.*\)/\1tags\/'$CI_COMMIT_TAG'\2/'
    science\:gr-framework/python-gr/_service |
    sed 's/\(.*version">\)[[:digit:]].*\(<.*\)/\1'$VERSION'\2/'
    > science\:gr-framework/python-gr/_service.new &&
    mv -f science\:gr-framework/python-gr/_service.new
    science\:gr-framework/python-gr/_service
  - osc commit science\:gr-framework/python-gr/_service -m "Release $CI_COMMIT_TAG"
